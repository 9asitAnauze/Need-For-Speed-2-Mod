======================
Command-Line Interface
======================

Hy provides a handful of command-line programs for working with Hy code.

.. _hy-cli:

hy
--

``hy`` is a command-line interface for Hy that in general imitates the program
``python`` provided by CPython. For example, ``hy`` without arguments launches
the :ref:`REPL <repl>`, whereas ``hy foo.hy a b`` runs the Hy program
``foo.hy`` with ``a`` and ``b`` as command-line arguments. See ``hy --help``
for a complete list of options and :py:ref:`Python's documentation
<using-on-cmdline>` for many details. Here are some Hy-specific details:

.. cmdoption:: -m <module>

   Much like Python's ``-m``, but the input module name will be :ref:`mangled
   <mangling>`.

.. cmdoption:: --spy

   Print equivalent Python code before executing each piece of Hy code in the
   REPL::

       => (+ 1 2)
       1 + 2
       3

.. cmdoption:: --repl-output-fn

   Set the :ref:`REPL output function <repl-output-function>`. This can be the
   name of a Python builtin, mostly likely ``repr``, or a dotted name like
   ``foo.bar.baz``. In the latter case, Hy will attempt to import the named
   object with code like ``(import foo.bar [baz])``.


.. _hy2py:

hy2py
-----

``hy2py`` is a program to convert Hy source code into Python source code. Use ``hy2py --help`` for usage instructions. It can take its input from standard input or from a filename provided as a command-line argument. The result is written to standard output.

    .. warning::
       ``hy2py`` can execute arbitrary code. Don't give it untrusted input.



.. _hyc:

hyc
---

``hyc`` is a program to compile files of Hy code into Python bytecode. Use ``hyc --help`` for usage instructions. The generated bytecode files are named and placed according to the usual scheme of your Python executable, as indicated by :py:func:`importlib.util.cache_from_source`.

    .. warning::
       ``hyc`` can execute arbitrary code. Don't give it untrusted input.
